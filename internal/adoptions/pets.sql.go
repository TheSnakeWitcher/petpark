// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: pets.sql

package adoptions

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addPet = `-- name: AddPet :execresult
insert into pets (id , picked , address , contact, details)
values(DEFAULT, $1 , $2 , $3 , $4)
`

type AddPetParams struct {
	Picked  time.Time `db:"picked" json:"picked"`
	Address string    `db:"address" json:"address"`
	Contact string    `db:"contact" json:"contact"`
	Details string    `db:"details" json:"details"`
}

func (q *Queries) AddPet(ctx context.Context, arg AddPetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addPet,
		arg.Picked,
		arg.Address,
		arg.Contact,
		arg.Details,
	)
}

const delPet = `-- name: DelPet :exec
delete from pets where id = $1
`

func (q *Queries) DelPet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, delPet, id)
	return err
}

const getPet = `-- name: GetPet :one
select id, picked, address, contact, details from pets where id = $1
`

func (q *Queries) GetPet(ctx context.Context, id uuid.UUID) (Pet, error) {
	row := q.db.QueryRowContext(ctx, getPet, id)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Picked,
		&i.Address,
		&i.Contact,
		&i.Details,
	)
	return i, err
}

const listPets = `-- name: ListPets :many
select id, picked, address, contact, details from pets order by picked
`

func (q *Queries) ListPets(ctx context.Context) ([]Pet, error) {
	rows, err := q.db.QueryContext(ctx, listPets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pet{}
	for rows.Next() {
		var i Pet
		if err := rows.Scan(
			&i.ID,
			&i.Picked,
			&i.Address,
			&i.Contact,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
